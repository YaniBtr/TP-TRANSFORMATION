/**
 */
package myJava.provider;

import java.util.ArrayList;
import java.util.Collection;

import myJava.util.MyJavaAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MyJavaItemProviderAdapterFactory extends MyJavaAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MyJavaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JClasse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JClasseItemProvider jClasseItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JClasse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJClasseAdapter() {
		if (jClasseItemProvider == null) {
			jClasseItemProvider = new JClasseItemProvider(this);
		}

		return jClasseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JClasseLibrairie} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JClasseLibrairieItemProvider jClasseLibrairieItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JClasseLibrairie}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJClasseLibrairieAdapter() {
		if (jClasseLibrairieItemProvider == null) {
			jClasseLibrairieItemProvider = new JClasseLibrairieItemProvider(this);
		}

		return jClasseLibrairieItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JMethode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JMethodeItemProvider jMethodeItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JMethode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJMethodeAdapter() {
		if (jMethodeItemProvider == null) {
			jMethodeItemProvider = new JMethodeItemProvider(this);
		}

		return jMethodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JAttribut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JAttributItemProvider jAttributItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JAttribut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJAttributAdapter() {
		if (jAttributItemProvider == null) {
			jAttributItemProvider = new JAttributItemProvider(this);
		}

		return jAttributItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.Declaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarationItemProvider declarationItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.Declaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarationAdapter() {
		if (declarationItemProvider == null) {
			declarationItemProvider = new DeclarationItemProvider(this);
		}

		return declarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JAppelMethode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JAppelMethodeItemProvider jAppelMethodeItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JAppelMethode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJAppelMethodeAdapter() {
		if (jAppelMethodeItemProvider == null) {
			jAppelMethodeItemProvider = new JAppelMethodeItemProvider(this);
		}

		return jAppelMethodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JCreation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JCreationItemProvider jCreationItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JCreation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJCreationAdapter() {
		if (jCreationItemProvider == null) {
			jCreationItemProvider = new JCreationItemProvider(this);
		}

		return jCreationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JVarRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JVarRefItemProvider jVarRefItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JVarRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJVarRefAdapter() {
		if (jVarRefItemProvider == null) {
			jVarRefItemProvider = new JVarRefItemProvider(this);
		}

		return jVarRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.StringConstante} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringConstanteItemProvider stringConstanteItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.StringConstante}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringConstanteAdapter() {
		if (stringConstanteItemProvider == null) {
			stringConstanteItemProvider = new StringConstanteItemProvider(this);
		}

		return stringConstanteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JConstructeur} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JConstructeurItemProvider jConstructeurItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JConstructeur}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJConstructeurAdapter() {
		if (jConstructeurItemProvider == null) {
			jConstructeurItemProvider = new JConstructeurItemProvider(this);
		}

		return jConstructeurItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JParametre} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JParametreItemProvider jParametreItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JParametre}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJParametreAdapter() {
		if (jParametreItemProvider == null) {
			jParametreItemProvider = new JParametreItemProvider(this);
		}

		return jParametreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.JType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JTypeItemProvider jTypeItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.JType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJTypeAdapter() {
		if (jTypeItemProvider == null) {
			jTypeItemProvider = new JTypeItemProvider(this);
		}

		return jTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.TypeRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeRefItemProvider typeRefItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.TypeRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeRefAdapter() {
		if (typeRefItemProvider == null) {
			typeRefItemProvider = new TypeRefItemProvider(this);
		}

		return typeRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.TypeBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeBaseItemProvider typeBaseItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.TypeBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeBaseAdapter() {
		if (typeBaseItemProvider == null) {
			typeBaseItemProvider = new TypeBaseItemProvider(this);
		}

		return typeBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link myJava.IntConstante} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntConstanteItemProvider intConstanteItemProvider;

	/**
	 * This creates an adapter for a {@link myJava.IntConstante}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntConstanteAdapter() {
		if (intConstanteItemProvider == null) {
			intConstanteItemProvider = new IntConstanteItemProvider(this);
		}

		return intConstanteItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (jClasseItemProvider != null)
			jClasseItemProvider.dispose();
		if (jClasseLibrairieItemProvider != null)
			jClasseLibrairieItemProvider.dispose();
		if (jMethodeItemProvider != null)
			jMethodeItemProvider.dispose();
		if (jAttributItemProvider != null)
			jAttributItemProvider.dispose();
		if (declarationItemProvider != null)
			declarationItemProvider.dispose();
		if (jAppelMethodeItemProvider != null)
			jAppelMethodeItemProvider.dispose();
		if (jCreationItemProvider != null)
			jCreationItemProvider.dispose();
		if (jVarRefItemProvider != null)
			jVarRefItemProvider.dispose();
		if (stringConstanteItemProvider != null)
			stringConstanteItemProvider.dispose();
		if (jConstructeurItemProvider != null)
			jConstructeurItemProvider.dispose();
		if (jParametreItemProvider != null)
			jParametreItemProvider.dispose();
		if (jTypeItemProvider != null)
			jTypeItemProvider.dispose();
		if (typeRefItemProvider != null)
			typeRefItemProvider.dispose();
		if (typeBaseItemProvider != null)
			typeBaseItemProvider.dispose();
		if (intConstanteItemProvider != null)
			intConstanteItemProvider.dispose();
	}

}
