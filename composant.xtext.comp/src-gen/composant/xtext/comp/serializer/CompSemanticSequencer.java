/*
 * generated by Xtext 2.26.0
 */
package composant.xtext.comp.serializer;

import com.google.inject.Inject;
import composant.Composant;
import composant.ComposantPackage;
import composant.Connecteur;
import composant.Port;
import composant.Property;
import composant.xtext.comp.services.CompGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CompSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CompGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ComposantPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ComposantPackage.COMPOSANT:
				sequence_Composant(context, (Composant) semanticObject); 
				return; 
			case ComposantPackage.CONNECTEUR:
				sequence_Connecteur(context, (Connecteur) semanticObject); 
				return; 
			case ComposantPackage.PORT:
				sequence_Port(context, (Port) semanticObject); 
				return; 
			case ComposantPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Composant returns Composant
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (ports+=Port ports+=Port*)? 
	 *         (fils+=Composant fils+=Composant*)? 
	 *         (connecteurs+=Connecteur connecteurs+=Connecteur*)? 
	 *         (properties+=Property properties+=Property*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Composant(ISerializationContext context, Composant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Connecteur returns Connecteur
	 *
	 * Constraint:
	 *     (name=ID src=[Port|QualifiedID] dst=[Port|QualifiedID] (properties+=Property properties+=Property*)?)
	 * </pre>
	 */
	protected void sequence_Connecteur(ISerializationContext context, Connecteur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Port returns Port
	 *
	 * Constraint:
	 *     (direction=Direction name=ID (properties+=Property properties+=Property*)?)
	 * </pre>
	 */
	protected void sequence_Port(ISerializationContext context, Port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (clee=EString valeur=EString)
	 * </pre>
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComposantPackage.Literals.PROPERTY__CLEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComposantPackage.Literals.PROPERTY__CLEE));
			if (transientValues.isValueTransient(semanticObject, ComposantPackage.Literals.PROPERTY__VALEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComposantPackage.Literals.PROPERTY__VALEUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getCleeEStringParserRuleCall_0_0(), semanticObject.getClee());
		feeder.accept(grammarAccess.getPropertyAccess().getValeurEStringParserRuleCall_2_0(), semanticObject.getValeur());
		feeder.finish();
	}
	
	
}
