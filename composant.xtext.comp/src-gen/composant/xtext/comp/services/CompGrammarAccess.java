/*
 * generated by Xtext 2.26.0
 */
package composant.xtext.comp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CompGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ComposantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "composant.xtext.comp.Comp.Composant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPortsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_2_1_0 = (RuleCall)cPortsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPortsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_2_2_1_0 = (RuleCall)cPortsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cFilsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cFilsComposantParserRuleCall_4_0_0 = (RuleCall)cFilsAssignment_4_0.eContents().get(0);
		private final Assignment cFilsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFilsComposantParserRuleCall_4_1_0 = (RuleCall)cFilsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cConnecteursAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cConnecteursConnecteurParserRuleCall_5_0_0 = (RuleCall)cConnecteursAssignment_5_0.eContents().get(0);
		private final Assignment cConnecteursAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnecteursConnecteurParserRuleCall_5_1_0 = (RuleCall)cConnecteursAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPropertiesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_1_0 = (RuleCall)cPropertiesAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_2_1_0 = (RuleCall)cPropertiesAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Composant returns Composant:
		//    'component' name=ID
		//        ('(' ports+=Port ( "," ports+=Port)* ')' )?
		//        '{'
		//        (fils+=Composant ( fils+=Composant)* )?
		//        (connecteurs+=Connecteur (connecteurs+=Connecteur)*)?
		//        ('properties' properties+=Property ( "," properties+=Property)* )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'component' name=ID
		//    ('(' ports+=Port ( "," ports+=Port)* ')' )?
		//    '{'
		//    (fils+=Composant ( fils+=Composant)* )?
		//    (connecteurs+=Connecteur (connecteurs+=Connecteur)*)?
		//    ('properties' properties+=Property ( "," properties+=Property)* )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' ports+=Port ( "," ports+=Port)* ')' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_2_1() { return cPortsAssignment_2_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_2_1_0() { return cPortsPortParserRuleCall_2_1_0; }
		
		//( "," ports+=Port)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_2_2_1() { return cPortsAssignment_2_2_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_2_2_1_0() { return cPortsPortParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(fils+=Composant ( fils+=Composant)* )?
		public Group getGroup_4() { return cGroup_4; }
		
		//fils+=Composant
		public Assignment getFilsAssignment_4_0() { return cFilsAssignment_4_0; }
		
		//Composant
		public RuleCall getFilsComposantParserRuleCall_4_0_0() { return cFilsComposantParserRuleCall_4_0_0; }
		
		//( fils+=Composant)*
		public Assignment getFilsAssignment_4_1() { return cFilsAssignment_4_1; }
		
		//Composant
		public RuleCall getFilsComposantParserRuleCall_4_1_0() { return cFilsComposantParserRuleCall_4_1_0; }
		
		//(connecteurs+=Connecteur (connecteurs+=Connecteur)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//connecteurs+=Connecteur
		public Assignment getConnecteursAssignment_5_0() { return cConnecteursAssignment_5_0; }
		
		//Connecteur
		public RuleCall getConnecteursConnecteurParserRuleCall_5_0_0() { return cConnecteursConnecteurParserRuleCall_5_0_0; }
		
		//(connecteurs+=Connecteur)*
		public Assignment getConnecteursAssignment_5_1() { return cConnecteursAssignment_5_1; }
		
		//Connecteur
		public RuleCall getConnecteursConnecteurParserRuleCall_5_1_0() { return cConnecteursConnecteurParserRuleCall_5_1_0; }
		
		//('properties' properties+=Property ( "," properties+=Property)* )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'properties'
		public Keyword getPropertiesKeyword_6_0() { return cPropertiesKeyword_6_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_6_1() { return cPropertiesAssignment_6_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_1_0() { return cPropertiesPropertyParserRuleCall_6_1_0; }
		
		//( "," properties+=Property)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_6_2_1() { return cPropertiesAssignment_6_2_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_2_1_0() { return cPropertiesPropertyParserRuleCall_6_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "composant.xtext.comp.Comp.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "composant.xtext.comp.Comp.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCleeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCleeEStringParserRuleCall_0_0 = (RuleCall)cCleeAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValeurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValeurEStringParserRuleCall_2_0 = (RuleCall)cValeurAssignment_2.eContents().get(0);
		
		//Property returns Property:
		//        clee=EString ':=' valeur=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//clee=EString ':=' valeur=EString
		public Group getGroup() { return cGroup; }
		
		//clee=EString
		public Assignment getCleeAssignment_0() { return cCleeAssignment_0; }
		
		//EString
		public RuleCall getCleeEStringParserRuleCall_0_0() { return cCleeEStringParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//valeur=EString
		public Assignment getValeurAssignment_2() { return cValeurAssignment_2; }
		
		//EString
		public RuleCall getValeurEStringParserRuleCall_2_0() { return cValeurEStringParserRuleCall_2_0; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "composant.xtext.comp.Comp.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_2_1_0 = (RuleCall)cPropertiesAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Port returns Port:
		//    direction=Direction
		//    name=ID
		//        ('{' properties+=Property ( "," properties+=Property)* '}' )?;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=Direction
		//name=ID
		//    ('{' properties+=Property ( "," properties+=Property)* '}' )?
		public Group getGroup() { return cGroup; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_0_0() { return cDirectionDirectionEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' properties+=Property ( "," properties+=Property)* '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_1_0() { return cPropertiesPropertyParserRuleCall_2_1_0; }
		
		//( "," properties+=Property)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_2_2_1() { return cPropertiesAssignment_2_2_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_2_1_0() { return cPropertiesPropertyParserRuleCall_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}
	public class ConnecteurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "composant.xtext.comp.Comp.Connecteur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSrcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSrcPortCrossReference_2_0 = (CrossReference)cSrcAssignment_2.eContents().get(0);
		private final RuleCall cSrcPortQualifiedIDParserRuleCall_2_0_1 = (RuleCall)cSrcPortCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDstAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDstPortCrossReference_4_0 = (CrossReference)cDstAssignment_4.eContents().get(0);
		private final RuleCall cDstPortQualifiedIDParserRuleCall_4_0_1 = (RuleCall)cDstPortCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_1_0 = (RuleCall)cPropertiesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_2_1_0 = (RuleCall)cPropertiesAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Connecteur returns Connecteur:
		//    name=ID ':'
		//        src=[Port|QualifiedID] "->" dst=[Port|QualifiedID]
		//        ('{' properties+=Property ( "," properties+=Property)* '}' )?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':'
		//    src=[Port|QualifiedID] "->" dst=[Port|QualifiedID]
		//    ('{' properties+=Property ( "," properties+=Property)* '}' )?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//src=[Port|QualifiedID]
		public Assignment getSrcAssignment_2() { return cSrcAssignment_2; }
		
		//[Port|QualifiedID]
		public CrossReference getSrcPortCrossReference_2_0() { return cSrcPortCrossReference_2_0; }
		
		//QualifiedID
		public RuleCall getSrcPortQualifiedIDParserRuleCall_2_0_1() { return cSrcPortQualifiedIDParserRuleCall_2_0_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//dst=[Port|QualifiedID]
		public Assignment getDstAssignment_4() { return cDstAssignment_4; }
		
		//[Port|QualifiedID]
		public CrossReference getDstPortCrossReference_4_0() { return cDstPortCrossReference_4_0; }
		
		//QualifiedID
		public RuleCall getDstPortQualifiedIDParserRuleCall_4_0_1() { return cDstPortQualifiedIDParserRuleCall_4_0_1; }
		
		//('{' properties+=Property ( "," properties+=Property)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_5_1() { return cPropertiesAssignment_5_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_1_0() { return cPropertiesPropertyParserRuleCall_5_1_0; }
		
		//( "," properties+=Property)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_5_2_1() { return cPropertiesAssignment_5_2_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_2_1_0() { return cPropertiesPropertyParserRuleCall_5_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "composant.xtext.comp.Comp.QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedID:
		//    ID('.'ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID('.'ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.'ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class DirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "composant.xtext.comp.Comp.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Direction returns Direction:
		//                IN = 'in' | OUT = 'out';
		public EnumRule getRule() { return rule; }
		
		//IN = 'in' | OUT = 'out'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN = 'in'
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }
		
		//OUT = 'out'
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOUTOutKeyword_1_0() { return cOUTOutKeyword_1_0; }
	}
	
	private final ComposantElements pComposant;
	private final EStringElements pEString;
	private final PropertyElements pProperty;
	private final PortElements pPort;
	private final ConnecteurElements pConnecteur;
	private final QualifiedIDElements pQualifiedID;
	private final DirectionElements eDirection;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CompGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pComposant = new ComposantElements();
		this.pEString = new EStringElements();
		this.pProperty = new PropertyElements();
		this.pPort = new PortElements();
		this.pConnecteur = new ConnecteurElements();
		this.pQualifiedID = new QualifiedIDElements();
		this.eDirection = new DirectionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("composant.xtext.comp.Comp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Composant returns Composant:
	//    'component' name=ID
	//        ('(' ports+=Port ( "," ports+=Port)* ')' )?
	//        '{'
	//        (fils+=Composant ( fils+=Composant)* )?
	//        (connecteurs+=Connecteur (connecteurs+=Connecteur)*)?
	//        ('properties' properties+=Property ( "," properties+=Property)* )?
	//    '}';
	public ComposantElements getComposantAccess() {
		return pComposant;
	}
	
	public ParserRule getComposantRule() {
		return getComposantAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Property returns Property:
	//        clee=EString ':=' valeur=EString;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Port returns Port:
	//    direction=Direction
	//    name=ID
	//        ('{' properties+=Property ( "," properties+=Property)* '}' )?;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Connecteur returns Connecteur:
	//    name=ID ':'
	//        src=[Port|QualifiedID] "->" dst=[Port|QualifiedID]
	//        ('{' properties+=Property ( "," properties+=Property)* '}' )?;
	public ConnecteurElements getConnecteurAccess() {
		return pConnecteur;
	}
	
	public ParserRule getConnecteurRule() {
		return getConnecteurAccess().getRule();
	}
	
	//QualifiedID:
	//    ID('.'ID)?
	//;
	public QualifiedIDElements getQualifiedIDAccess() {
		return pQualifiedID;
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//enum Direction returns Direction:
	//                IN = 'in' | OUT = 'out';
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
