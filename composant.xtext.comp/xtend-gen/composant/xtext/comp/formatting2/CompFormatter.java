/**
 * generated by Xtext 2.26.0
 */
package composant.xtext.comp.formatting2;

import com.google.inject.Inject;
import composant.Composant;
import composant.Connecteur;
import composant.Port;
import composant.Property;
import composant.xtext.comp.services.CompGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;

@SuppressWarnings("all")
public class CompFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CompGrammarAccess _compGrammarAccess;

  protected void _format(final Composant composant, @Extension final IFormattableDocument document) {
    EList<Port> _ports = composant.getPorts();
    for (final Port port : _ports) {
      document.<Port>format(port);
    }
    EList<Composant> _fils = composant.getFils();
    for (final Composant _composant : _fils) {
      document.<Composant>format(_composant);
    }
    EList<Connecteur> _connecteurs = composant.getConnecteurs();
    for (final Connecteur connecteur : _connecteurs) {
      document.<Connecteur>format(connecteur);
    }
    EList<Property> _properties = composant.getProperties();
    for (final Property property : _properties) {
      document.<Property>format(property);
    }
  }

  protected void _format(final Port port, @Extension final IFormattableDocument document) {
    EList<Property> _properties = port.getProperties();
    for (final Property property : _properties) {
      document.<Property>format(property);
    }
  }

  @XbaseGenerated
  public void format(final Object composant, final IFormattableDocument document) {
    if (composant instanceof XtextResource) {
      _format((XtextResource)composant, document);
      return;
    } else if (composant instanceof Composant) {
      _format((Composant)composant, document);
      return;
    } else if (composant instanceof Port) {
      _format((Port)composant, document);
      return;
    } else if (composant instanceof EObject) {
      _format((EObject)composant, document);
      return;
    } else if (composant == null) {
      _format((Void)null, document);
      return;
    } else if (composant != null) {
      _format(composant, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(composant, document).toString());
    }
  }
}
