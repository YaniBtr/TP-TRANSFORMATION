/*
 * generated by Xtext 2.26.0
 */
package composant.xtext.comp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import composant.xtext.comp.ide.contentassist.antlr.internal.InternalCompParser;
import composant.xtext.comp.services.CompGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CompParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CompGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CompGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
			builder.put(grammarAccess.getComposantAccess().getGroup(), "rule__Composant__Group__0");
			builder.put(grammarAccess.getComposantAccess().getGroup_2(), "rule__Composant__Group_2__0");
			builder.put(grammarAccess.getComposantAccess().getGroup_2_2(), "rule__Composant__Group_2_2__0");
			builder.put(grammarAccess.getComposantAccess().getGroup_4(), "rule__Composant__Group_4__0");
			builder.put(grammarAccess.getComposantAccess().getGroup_5(), "rule__Composant__Group_5__0");
			builder.put(grammarAccess.getComposantAccess().getGroup_6(), "rule__Composant__Group_6__0");
			builder.put(grammarAccess.getComposantAccess().getGroup_6_2(), "rule__Composant__Group_6_2__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getPortAccess().getGroup(), "rule__Port__Group__0");
			builder.put(grammarAccess.getPortAccess().getGroup_2(), "rule__Port__Group_2__0");
			builder.put(grammarAccess.getPortAccess().getGroup_2_2(), "rule__Port__Group_2_2__0");
			builder.put(grammarAccess.getConnecteurAccess().getGroup(), "rule__Connecteur__Group__0");
			builder.put(grammarAccess.getConnecteurAccess().getGroup_5(), "rule__Connecteur__Group_5__0");
			builder.put(grammarAccess.getConnecteurAccess().getGroup_5_2(), "rule__Connecteur__Group_5_2__0");
			builder.put(grammarAccess.getQualifiedIDAccess().getGroup(), "rule__QualifiedID__Group__0");
			builder.put(grammarAccess.getQualifiedIDAccess().getGroup_1(), "rule__QualifiedID__Group_1__0");
			builder.put(grammarAccess.getComposantAccess().getNameAssignment_1(), "rule__Composant__NameAssignment_1");
			builder.put(grammarAccess.getComposantAccess().getPortsAssignment_2_1(), "rule__Composant__PortsAssignment_2_1");
			builder.put(grammarAccess.getComposantAccess().getPortsAssignment_2_2_1(), "rule__Composant__PortsAssignment_2_2_1");
			builder.put(grammarAccess.getComposantAccess().getFilsAssignment_4_0(), "rule__Composant__FilsAssignment_4_0");
			builder.put(grammarAccess.getComposantAccess().getFilsAssignment_4_1(), "rule__Composant__FilsAssignment_4_1");
			builder.put(grammarAccess.getComposantAccess().getConnecteursAssignment_5_0(), "rule__Composant__ConnecteursAssignment_5_0");
			builder.put(grammarAccess.getComposantAccess().getConnecteursAssignment_5_1(), "rule__Composant__ConnecteursAssignment_5_1");
			builder.put(grammarAccess.getComposantAccess().getPropertiesAssignment_6_1(), "rule__Composant__PropertiesAssignment_6_1");
			builder.put(grammarAccess.getComposantAccess().getPropertiesAssignment_6_2_1(), "rule__Composant__PropertiesAssignment_6_2_1");
			builder.put(grammarAccess.getPropertyAccess().getCleeAssignment_0(), "rule__Property__CleeAssignment_0");
			builder.put(grammarAccess.getPropertyAccess().getValeurAssignment_2(), "rule__Property__ValeurAssignment_2");
			builder.put(grammarAccess.getPortAccess().getDirectionAssignment_0(), "rule__Port__DirectionAssignment_0");
			builder.put(grammarAccess.getPortAccess().getNameAssignment_1(), "rule__Port__NameAssignment_1");
			builder.put(grammarAccess.getPortAccess().getPropertiesAssignment_2_1(), "rule__Port__PropertiesAssignment_2_1");
			builder.put(grammarAccess.getPortAccess().getPropertiesAssignment_2_2_1(), "rule__Port__PropertiesAssignment_2_2_1");
			builder.put(grammarAccess.getConnecteurAccess().getNameAssignment_0(), "rule__Connecteur__NameAssignment_0");
			builder.put(grammarAccess.getConnecteurAccess().getSrcAssignment_2(), "rule__Connecteur__SrcAssignment_2");
			builder.put(grammarAccess.getConnecteurAccess().getDstAssignment_4(), "rule__Connecteur__DstAssignment_4");
			builder.put(grammarAccess.getConnecteurAccess().getPropertiesAssignment_5_1(), "rule__Connecteur__PropertiesAssignment_5_1");
			builder.put(grammarAccess.getConnecteurAccess().getPropertiesAssignment_5_2_1(), "rule__Connecteur__PropertiesAssignment_5_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CompGrammarAccess grammarAccess;

	@Override
	protected InternalCompParser createParser() {
		InternalCompParser result = new InternalCompParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CompGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CompGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
